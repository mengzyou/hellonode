name: Node.js CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    container: node:12.16-alpine
#    strategy:
#      matrix:
#        node-version: [8.x]
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
#    - name: Use Node.js ${{ matrix.node-version }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
  #        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
  
      - name: Install Dependencies
        run: npm install
  
      - name: Test
        run: npm test
        env:
          CI: true
  
      - name: Connect to Redis
        run: node client.js
        env:
          REDIS_HOST: redis
          REDIS_PORT: 6379
  
  package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - name: Build & Push container image
        uses: mr-smithers-excellent/docker-build-push@v2
        with:
          image: mengzyou/hellonode
          tag: latest
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    runs-on: [self-hosted,linux]
    steps:
      - name: Docker run container
        env:
          CONTAINER_IMAGE: mengzyou/hellonode
          CONTAINER_NAME: webapps_hellonode
        run: docker image pull $CONTAINER_IMAGE
        run: |
          docker container stop $CONTAINER_NAME || true
          docker container rm -f $CONTAINER_NAME || true
        run: docker container run --name $CONTAINER_NAME -d -p 8000:3000 $CONTAINER_IMAGE
        run: docker image prune -f    # remove the dangling images